generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String     @id @default(uuid())
  userId      String
  title       String
  imageUrl    String?
  description String?
  price       Float?
  isPublished Boolean    @default(false)
  chapters    Chapter[]
  attachments Attachment[]
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  purchases   Purchase[] // Added this field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attachment {
  id        String  @id @default(uuid())
  name      String
  courseId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id          String    @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  courseId    String
  isPublished Boolean   @default(false)
  isFree      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  muxData      MuxData?
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String   @id @default(uuid())
  assetId    String
  chapterId  String   @unique
  playbackId String?
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserProgress {
  id         String   @id @default(uuid())
  userId     String
  chapterId  String
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid()) @map("_id")
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}